import requests
from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import os
from dotenv import load_dotenv
import json
import uuid
import asyncio
import redis
from typing import Dict, List, Optional
import logging
from datetime import datetime

load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Redis connection
redis_client = redis.Redis(
    host=os.getenv("REDIS_HOST", "localhost"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    db=0
)

# Task states
PENDING = "pending"
IN_PROGRESS = "in_progress"
COMPLETED = "completed"
FAILED = "failed"

# Task types
WEB_RESEARCH = "web_research"
CODE_GENERATION = "code_generation"
DATA_ANALYSIS = "data_analysis"
CONTENT_CREATION = "content_creation"

class TaskRequest(BaseModel):
    task: str
    context: dict = {}
    priority: int = 1
    agent_type: Optional[str] = None

class TaskResponse(BaseModel):
    task_id: str
    status: str
    result: Optional[str] = None
    error: Optional[str] = None
    progress: float = 0.0
    subtasks: List[dict] = []

class Subtask(BaseModel):
    id: str
    type: str
    status: str
    result: Optional[str] = None
    error: Optional[str] = None
    progress: float = 0.0

# Orchestrator Agent implementation
class OrchestratorAgent:
    def __init__(self):
        self.active_tasks = {}
        self.task_queue = []
        self.agent_pool = {
            WEB_RESEARCH: 0,
            CODE_GENERATION: 0,
            DATA_ANALYSIS: 0,
            CONTENT_CREATION: 0
        }
        
    async def validate_task(self, task: TaskRequest) -> bool:
        """Validate task input and requirements."""
        if not task.task:
            return False
        return True
    
    async def plan_task(self, task: TaskRequest) -> List[Subtask]:
        """Generate execution plan with sub-tasks."""
        # Basic task analysis
        subtasks = []
        
        # Add appropriate subtasks based on task type
        if "research" in task.task.lower():
            subtasks.append(Subtask(
                id=str(uuid.uuid4()),
                type=WEB_RESEARCH,
                status=PENDING
            ))
        
        if "code" in task.task.lower():
            subtasks.append(Subtask(
                id=str(uuid.uuid4()),
                type=CODE_GENERATION,
                status=PENDING
            ))
        
        if "analyze" in task.task.lower():
            subtasks.append(Subtask(
                id=str(uuid.uuid4()),
                type=DATA_ANALYSIS,
                status=PENDING
            ))
        
        if "write" in task.task.lower():
            subtasks.append(Subtask(
                id=str(uuid.uuid4()),
                type=CONTENT_CREATION,
                status=PENDING
            ))
        
        return subtasks
    
    async def execute_task(self, task_id: str):
        """Execute task with subtasks."""
        # Get task from Redis
        task_data = redis_client.get(f"task:{task_id}")
        if not task_data:
            logger.error(f"Task {task_id} not found in Redis")
            return
            
        task = TaskResponse(**json.loads(task_data))
        task.subtasks = [Subtask(**st) for st in task.subtasks]
        
        # Process subtasks
        for subtask in task.subtasks:
            if subtask.status == PENDING:
                subtask.status = IN_PROGRESS
                logger.info(f"Starting subtask {subtask.id} of type {subtask.type}")
                
                # Simulate execution
                await asyncio.sleep(1)  # Simulate work
                
                # Update progress
                subtask.progress = 1.0
                subtask.status = COMPLETED
                subtask.result = f"Subtask {subtask.id} completed"
                
                # Update task progress
                completed = sum(1 for st in task.subtasks if st.status == COMPLETED)
                total = len(task.subtasks)
                task.progress = completed / total if total > 0 else 0
                
                # Update Redis
                redis_client.set(f"task:{task_id}", json.dumps(task.dict()))
                
                # Notify connected clients
                await self.notify_clients(task_id)
                
                logger.info(f"Completed subtask {subtask.id} with progress {task.progress * 100:.1f}%")
                
        # Update task status to completed when all subtasks are done
        if all(st.status == COMPLETED for st in task.subtasks):
            task.status = COMPLETED
            redis_client.set(f"task:{task_id}", json.dumps(task.dict()))
            logger.info(f"Task {task_id} completed")
    
    async def notify_clients(self, task_id: str):
        """Notify connected WebSocket clients of task updates."""
        # This would be implemented with Redis pub/sub
        # For now, we'll just log the notification
        logger.info(f"Notifying clients about updates for task {task_id}")
    
    async def notify_clients(self, task_id: str):
        """Notify connected WebSocket clients of task updates."""
        # This would be implemented with Redis pub/sub
        pass

orchestrator = OrchestratorAgent()

@app.post("/tasks/submit")
async def submit_task(request: TaskRequest):
    """Submit a new task to the orchestrator."""
    try:
        # Validate task
        if not await orchestrator.validate_task(request):
            raise HTTPException(status_code=400, detail="Invalid task")
            
        # Create task ID
        task_id = str(uuid.uuid4())
        
        # Plan task
        subtasks = await orchestrator.plan_task(request)
        
        # Create task response
        response = TaskResponse(
            task_id=task_id,
            status=PENDING,
            subtasks=[st.dict() for st in subtasks]
        )
        
        # Store in Redis with expiration (7 days)
        redis_client.set(f"task:{task_id}", json.dumps(response.dict()), ex=604800)  # 7 days
        
        # Add to queue
        orchestrator.task_queue.append(task_id)
        
        # Start execution
        asyncio.create_task(orchestrator.execute_task(task_id))
        
        logger.info(f"Task {task_id} submitted with {len(subtasks)} subtasks")
        return response
        
    except Exception as e:
        error_msg = f"Error submitting task: {str(e)}"
        logger.error(error_msg)
        raise HTTPException(status_code=500, detail=error_msg)

@app.websocket("/ws/{task_id}")
async def websocket_endpoint(websocket: WebSocket, task_id: str):
    """WebSocket endpoint for real-time task updates."""
    await websocket.accept()
    
    try:
        while True:
            # Get task status from Redis
            task_data = redis_client.get(f"task:{task_id}")
            if task_data:
                await websocket.send_text(task_data.decode())
            
            await asyncio.sleep(1)
            
    except WebSocketDisconnect:
        pass
    except Exception as e:
        logger.error(f"WebSocket error: {str(e)}")

@app.get("/tasks/{task_id}")
async def get_task_status(task_id: str):
    """Get task status by ID."""
    try:
        task_data = redis_client.get(f"task:{task_id}")
        if not task_data:
            raise HTTPException(status_code=404, detail="Task not found")
            
        task_dict = json.loads(task_data)
        
        # Convert subtasks back to proper format
        task_dict["subtasks"] = [Subtask(**st) for st in task_dict["subtasks"]]
        
        # Return the dictionary directly
        return task_dict
        
    except json.JSONDecodeError:
        logger.error(f"Invalid JSON for task {task_id}")
        raise HTTPException(status_code=500, detail="Invalid task data")
    except Exception as e:
        logger.error(f"Error getting task status: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8096)
